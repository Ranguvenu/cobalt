{"version":3,"file":"player.min.js","sources":["../src/player.js"],"sourcesContent":["/**\n * Streaming video js\n *\n * @module     mod_stream/stream\n * @class      stream\n * @package    mod_stream\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery',\n        'core/str',\n        'media_videojs/video-lazy',\n        'core/ajax',\n        'mod_stream/videojs-playbackrate-adjuster',\n        'mod_stream/videojs-contrib-quality-levels',\n        'mod_stream/videojs-hls-quality-selector'],\n        function($, Str,videojs, Ajax){\n            return {\n                load: function(args){\n                    var values = JSON.parse(args);\n                    const player = videojs(values.identifier);\n                    var myVideoPlayer = document.getElementById('mod_stream_form_video');\n                    player.src({\n                        src: values.src,\n                        type: 'application/x-mpegURL'\n                    });\n                     player.hlsQualitySelector({\n                       displayCurrentQuality: true,\n                    });\n                    if(typeof(myVideoPlayer) != 'undefined'  && myVideoPlayer != null){\n                        myVideoPlayer.onloadedmetadata = function() {\n                          console.log('metadata loaded!');\n                          console.log(this.duration);//this refers to myVideo\n                        };\n                        myVideoPlayer.addEventListener('loadedmetadata', function () {\n                            console.log(myVideoPlayer.duration);\n                            $('#stream_duration').val(myVideoPlayer.duration.toFixed(0));\n                        });\n                    }\n\n                 /*   $(window).bind('beforeunload', function(){\n                        var currenttime = player.currentTime();\n                        var lengthOfVideo = player.duration();\n                        var promises = Ajax.call([{\n                            methodname: 'mod_streamattempts',\n                            args: { moduleid:values.cm, courseid:values.course, duration:lengthOfVideo, currenttime: currenttime, event:'pause'},\n                        }])\n\n                        promises[0].done(function(response) {\n                            console.log(Str.get_string('unloaddetails','block_stream'));\n                        }).fail(function(ex) {\n                            console.log('Not Updated' + JSON.stringify(ex));\n                        });\n                    });\n\n                    var promises = Ajax.call([{\n                        methodname: 'mod_streamattempts',\n                        args: { moduleid:values.cm, courseid:values.course, event: 'paused'},\n                    }])\n\n                    promises[0].done(function(response) {\n                        var pause = JSON.stringify(response);\n                        var check = JSON.parse(pause);\n                        if(check.recordid != '1'){\n                            player.currentTime(check.recordid);\n                        }else {\n                            player.currentTime(0);\n                        }\n                        player.on(\"seeking\", function(event) {\n                            if (currentTime < player.currentTime()) {\n                                player.currentTime(currentTime);\n                            }\n                        });\n\n                        player.on(\"seeked\", function(event) {\n                            if (currentTime < player.currentTime()) {\n                                player.currentTime(currentTime);\n                            }\n                        });\n                        setInterval(function() {\n                            if (!player.paused()) {\n                                currentTime = player.currentTime();\n                            }\n                        }, 1000);\n                    }).fail(function(ex) {\n                        console.log(Str.get_string('completedduration','block_stream'));\n                    });\n\n                    player.on(\"play\", function() {\n                        var lengthOfVideo = player.duration();\n                        var promises = Ajax.call([{\n                            methodname: 'mod_streamattempts',\n                            args: { moduleid:values.cm, courseid:values.course, duration:lengthOfVideo, event:'play'},\n                        }])\n\n                        promises[0].done(function(response) {\n                            console.log('Inserted');\n                        }).fail(function(ex) {\n                            console.log(Str.get_string('notintrested','block_stream'));\n                        });\n                    });*/\n\n                    player.on(\"pause\", function() {\n                        var currenttime = player.currentTime();\n                        var lengthOfVideo = player.duration();\n\n                            var promises = Ajax.call([{\n                                methodname: 'mod_streamattempts',\n                                args: { moduleid:values.cm, courseid:values.course, duration:lengthOfVideo, currenttime: currenttime, event:'pause'},\n                            }])\n\n                            promises[0].done(function(response) {\n                                console.log(Str.get_string('Pauselog','block_stream'));\n                            }).fail(function(ex) {\n                                console.log(Str.get_string('notupdated','block_stream') + JSON.stringify(ex));\n                            });\n                    });\n            }\n        }\n    });\n"],"names":["define","$","Str","videojs","Ajax","load","args","values","JSON","parse","player","identifier","myVideoPlayer","document","getElementById","src","type","hlsQualitySelector","displayCurrentQuality","onloadedmetadata","console","log","this","duration","addEventListener","val","toFixed","on","currenttime","currentTime","lengthOfVideo","call","methodname","moduleid","cm","courseid","course","event","done","response","get_string","fail","ex","stringify"],"mappings":";;;;;;;;AAQAA,2BAAO,CAAC,SACA,WACA,2BACA,YACA,2CACA,4CACA,4CACA,SAASC,EAAGC,IAAIC,QAASC,YACd,CACHC,KAAM,SAASC,UACPC,OAASC,KAAKC,MAAMH,YAClBI,OAASP,QAAQI,OAAOI,gBAC1BC,cAAgBC,SAASC,eAAe,yBAC5CJ,OAAOK,IAAI,CACPA,IAAKR,OAAOQ,IACZC,KAAM,0BAETN,OAAOO,mBAAmB,CACxBC,uBAAuB,SAEE,IAAlBN,eAAmD,MAAjBA,gBACxCA,cAAcO,iBAAmB,WAC/BC,QAAQC,IAAI,oBACZD,QAAQC,IAAIC,KAAKC,WAEnBX,cAAcY,iBAAiB,kBAAkB,WAC7CJ,QAAQC,IAAIT,cAAcW,UAC1BtB,EAAE,oBAAoBwB,IAAIb,cAAcW,SAASG,QAAQ,QAkEjEhB,OAAOiB,GAAG,SAAS,eACXC,YAAclB,OAAOmB,cACrBC,cAAgBpB,OAAOa,WAERnB,KAAK2B,KAAK,CAAC,CACtBC,WAAY,qBACZ1B,KAAM,CAAE2B,SAAS1B,OAAO2B,GAAIC,SAAS5B,OAAO6B,OAAQb,SAASO,cAAeF,YAAaA,YAAaS,MAAM,YAGvG,GAAGC,MAAK,SAASC,UACtBnB,QAAQC,IAAInB,IAAIsC,WAAW,WAAW,oBACvCC,MAAK,SAASC,IACbtB,QAAQC,IAAInB,IAAIsC,WAAW,aAAa,gBAAkBhC,KAAKmC,UAAUD,YAKpG"}