{"version":3,"file":"videojs-contrib-quality-levels.min.js","sources":["../src/videojs-contrib-quality-levels.js"],"sourcesContent":["/*! @name videojs-contrib-quality-levels @version 3.0.0 @license Apache-2.0 */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('media_videojs/video-lazy')) :\n  typeof define === 'function' && define.amd ? define(['media_videojs/video-lazy'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.videojsContribQualityLevels = factory(global.videojs));\n}(this, (function (videojs) { 'use strict';\n\n  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\n\n  var videojs__default = /*#__PURE__*/_interopDefaultLegacy(videojs);\n\n  /**\n   * A single QualityLevel.\n   *\n   * interface QualityLevel {\n   *   readonly attribute DOMString id;\n   *            attribute DOMString label;\n   *   readonly attribute long width;\n   *   readonly attribute long height;\n   *   readonly attribute long bitrate;\n   *            attribute boolean enabled;\n   * };\n   *\n   * @class QualityLevel\n   */\n  class QualityLevel {\n    /**\n     * Creates a QualityLevel\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     */\n    constructor(representation) {\n      let level = this; // eslint-disable-line\n\n      level.id = representation.id;\n      level.label = level.id;\n      level.width = representation.width;\n      level.height = representation.height;\n      level.bitrate = representation.bandwidth;\n      level.frameRate = representation.frameRate;\n      level.enabled_ = representation.enabled;\n      Object.defineProperty(level, 'enabled', {\n        /**\n         * Get whether the QualityLevel is enabled.\n         *\n         * @return {boolean} True if the QualityLevel is enabled.\n         */\n        get() {\n          return level.enabled_();\n        },\n\n        /**\n         * Enable or disable the QualityLevel.\n         *\n         * @param {boolean} enable true to enable QualityLevel, false to disable.\n         */\n        set(enable) {\n          level.enabled_(enable);\n        }\n\n      });\n      return level;\n    }\n\n  }\n\n  /**\n   * A list of QualityLevels.\n   *\n   * interface QualityLevelList : EventTarget {\n   *   getter QualityLevel (unsigned long index);\n   *   readonly attribute unsigned long length;\n   *   readonly attribute long selectedIndex;\n   *\n   *   void addQualityLevel(QualityLevel qualityLevel)\n   *   void removeQualityLevel(QualityLevel remove)\n   *   QualityLevel? getQualityLevelById(DOMString id);\n   *\n   *   attribute EventHandler onchange;\n   *   attribute EventHandler onaddqualitylevel;\n   *   attribute EventHandler onremovequalitylevel;\n   * };\n   *\n   * @extends videojs.EventTarget\n   * @class QualityLevelList\n   */\n\n  class QualityLevelList extends videojs__default['default'].EventTarget {\n    constructor() {\n      super();\n      let list = this; // eslint-disable-line\n\n      list.levels_ = [];\n      list.selectedIndex_ = -1;\n      /**\n       * Get the index of the currently selected QualityLevel.\n       *\n       * @returns {number} The index of the selected QualityLevel. -1 if none selected.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'selectedIndex', {\n        get() {\n          return list.selectedIndex_;\n        }\n\n      });\n      /**\n       * Get the length of the list of QualityLevels.\n       *\n       * @returns {number} The length of the list.\n       * @readonly\n       */\n\n      Object.defineProperty(list, 'length', {\n        get() {\n          return list.levels_.length;\n        }\n\n      });\n      return list;\n    }\n    /**\n     * Adds a quality level to the list.\n     *\n     * @param {Representation|Object} representation The representation of the quality level\n     * @param {string}   representation.id        Unique id of the QualityLevel\n     * @param {number=}  representation.width     Resolution width of the QualityLevel\n     * @param {number=}  representation.height    Resolution height of the QualityLevel\n     * @param {number}   representation.bandwidth Bitrate of the QualityLevel\n     * @param {number=}  representation.frameRate Frame-rate of the QualityLevel\n     * @param {Function} representation.enabled   Callback to enable/disable QualityLevel\n     * @return {QualityLevel} the QualityLevel added to the list\n     * @method addQualityLevel\n     */\n\n\n    addQualityLevel(representation) {\n      let qualityLevel = this.getQualityLevelById(representation.id); // Do not add duplicate quality levels\n\n      if (qualityLevel) {\n        return qualityLevel;\n      }\n\n      const index = this.levels_.length;\n      qualityLevel = new QualityLevel(representation);\n\n      if (!('' + index in this)) {\n        Object.defineProperty(this, index, {\n          get() {\n            return this.levels_[index];\n          }\n\n        });\n      }\n\n      this.levels_.push(qualityLevel);\n      this.trigger({\n        qualityLevel,\n        type: 'addqualitylevel'\n      });\n      return qualityLevel;\n    }\n    /**\n     * Removes a quality level from the list.\n     *\n     * @param {QualityLevel} remove QualityLevel to remove to the list.\n     * @return {QualityLevel|null} the QualityLevel removed or null if nothing removed\n     * @method removeQualityLevel\n     */\n\n\n    removeQualityLevel(qualityLevel) {\n      let removed = null;\n\n      for (let i = 0, l = this.length; i < l; i++) {\n        if (this[i] === qualityLevel) {\n          removed = this.levels_.splice(i, 1)[0];\n\n          if (this.selectedIndex_ === i) {\n            this.selectedIndex_ = -1;\n          } else if (this.selectedIndex_ > i) {\n            this.selectedIndex_--;\n          }\n\n          break;\n        }\n      }\n\n      if (removed) {\n        this.trigger({\n          qualityLevel,\n          type: 'removequalitylevel'\n        });\n      }\n\n      return removed;\n    }\n    /**\n     * Searches for a QualityLevel with the given id.\n     *\n     * @param {string} id The id of the QualityLevel to find.\n     * @return {QualityLevel|null} The QualityLevel with id, or null if not found.\n     * @method getQualityLevelById\n     */\n\n\n    getQualityLevelById(id) {\n      for (let i = 0, l = this.length; i < l; i++) {\n        const level = this[i];\n\n        if (level.id === id) {\n          return level;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * Resets the list of QualityLevels to empty\n     *\n     * @method dispose\n     */\n\n\n    dispose() {\n      this.selectedIndex_ = -1;\n      this.levels_.length = 0;\n    }\n\n  }\n  /**\n   * change - The selected QualityLevel has changed.\n   * addqualitylevel - A QualityLevel has been added to the QualityLevelList.\n   * removequalitylevel - A QualityLevel has been removed from the QualityLevelList.\n   */\n\n\n  QualityLevelList.prototype.allowedEvents_ = {\n    change: 'change',\n    addqualitylevel: 'addqualitylevel',\n    removequalitylevel: 'removequalitylevel'\n  }; // emulate attribute EventHandler support to allow for feature detection\n\n  for (const event in QualityLevelList.prototype.allowedEvents_) {\n    QualityLevelList.prototype['on' + event] = null;\n  }\n\n  var version = \"3.0.0\";\n\n  const registerPlugin = videojs__default['default'].registerPlugin || videojs__default['default'].plugin;\n  /**\n   * Initialization function for the qualityLevels plugin. Sets up the QualityLevelList and\n   * event handlers.\n   *\n   * @param {Player} player Player object.\n   * @param {Object} options Plugin options object.\n   * @function initPlugin\n   */\n\n  const initPlugin = function (player, options) {\n    const originalPluginFn = player.qualityLevels;\n    const qualityLevelList = new QualityLevelList();\n\n    const disposeHandler = function () {\n      qualityLevelList.dispose();\n      player.qualityLevels = originalPluginFn;\n      player.off('dispose', disposeHandler);\n    };\n\n    player.on('dispose', disposeHandler);\n\n    player.qualityLevels = () => qualityLevelList;\n\n    player.qualityLevels.VERSION = version;\n    return qualityLevelList;\n  };\n  /**\n   * A video.js plugin.\n   *\n   * In the plugin function, the value of `this` is a video.js `Player`\n   * instance. You cannot rely on the player being in a \"ready\" state here,\n   * depending on how the plugin is invoked. This may or may not be important\n   * to you; if not, remove the wait for \"ready\"!\n   *\n   * @param {Object} options Plugin options object\n   * @function qualityLevels\n   */\n\n\n  const qualityLevels = function (options) {\n    return initPlugin(this, videojs__default['default'].mergeOptions({}, options));\n  }; // Register the plugin with video.js.\n\n\n  registerPlugin('qualityLevels', qualityLevels); // Include the version number.\n\n  qualityLevels.VERSION = version;\n\n  return qualityLevels;\n\n})));"],"names":["global","factory","this","videojs","e","videojs__default","QualityLevel","constructor","representation","level","id","label","width","height","bitrate","bandwidth","frameRate","enabled_","enabled","Object","defineProperty","get","set","enable","QualityLevelList","EventTarget","list","levels_","selectedIndex_","length","addQualityLevel","qualityLevel","getQualityLevelById","index","push","trigger","type","removeQualityLevel","removed","i","l","splice","dispose","prototype","allowedEvents_","change","addqualitylevel","removequalitylevel","event","registerPlugin","plugin","qualityLevels","options","player","originalPluginFn","qualityLevelList","disposeHandler","off","on","VERSION","initPlugin","mergeOptions","exports","module","require","define","amd","globalThis","self","videojsContribQualityLevels"],"mappings":"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"}